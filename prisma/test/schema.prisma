datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../../src/generated/test-prisma"
}

// --- Enums ---
enum AppRole {
  ADMIN
  MODERATOR
}

enum UserRole {
  USER
  PREMIUM_USER
  PERSONAL_TRAINER
}

enum GymRole {
  GYM_MODERATOR
  GYM_ADMIN
}

enum AssignmentStatus {
  PENDING
  COMPLETED
  MISSED
}

enum ImageJobStatus {
  pending
  processing
  succeeded
  failed
}

enum GymImageStatus {
  PENDING
  APPROVED
  REJECTED
  QUARANTINED
}

enum EmbeddingScopeType {
  GLOBAL
  GYM
}

// --- Models ---

model User {
  id                  Int       @id @default(autoincrement())
  username            String    @unique @db.VarChar(30)
  email               String    @unique @db.VarChar(255)
  password            String    @db.VarChar(100)
  appRole             AppRole?
  userRole            UserRole  @default(USER)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  deletedAt           DateTime?
  resetToken          String?
  resetTokenExpiresAt DateTime?
  tokenVersion        Int       @default(1)

  exercises          Exercise[]
  gymManagementRoles GymManagementRole[]
  workoutPlans       WorkoutPlan[]
  gymsAsTrainer      GymTrainer[]
  chatMemberships    GymChatMember[]
  sharedWorkouts     WorkoutPlan[]       @relation("SharedWorkouts")
  sharedPrograms     WorkoutProgram[]    @relation("SharedPrograms")

  createdGyms Gym[] @relation("UserCreatedGyms")

  workoutSessions            WorkoutSession[]
  trainerAssignments         AssignedWorkout[]            @relation("TrainerAssignments")
  userAssignments            AssignedWorkout[]            @relation("UserAssignments")
  WorkoutProgram             WorkoutProgram[]
  UserMuscleCooldownOverride UserMuscleCooldownOverride[]
  WorkoutProgramAssignment   WorkoutProgramAssignment[]
  UserWorkoutPreferences     UserWorkoutPreferences?

  experienceLevelId Int?
  experienceLevel   ExperienceLevel?    @relation(fields: [experienceLevelId], references: [id])
  trainingGoalId    Int?
  trainingGoal      TrainingGoal?       @relation(fields: [trainingGoalId], references: [id])
  EquipmentImage    EquipmentImage[]
  capturedGymEquipmentImages GymEquipmentImage[] @relation("GymEquipmentImageCapturedBy")
  approvedGymEquipmentImages GymEquipmentImage[] @relation("GymEquipmentImageApprovedBy")
  trainingCandidates        TrainingCandidate[] @relation("UserTrainingCandidates")
}

model WorkoutPlan {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  description String?
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  version      Int           @default(1)
  parentPlanId Int?
  parentPlan   WorkoutPlan?  @relation("PlanVersions", fields: [parentPlanId], references: [id])
  versions     WorkoutPlan[] @relation("PlanVersions")

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  groups WorkoutPlanGroup[] // ðŸ‘ˆ Add this

  trainingGoalId    Int?
  trainingGoal      TrainingGoal?    @relation(fields: [trainingGoalId], references: [id])
  intensityPresetId Int? // âœ… new
  intensityPreset   IntensityPreset? @relation(fields: [intensityPresetId], references: [id])

  experienceLevelId Int
  experienceLevel   ExperienceLevel @relation(fields: [experienceLevelId], references: [id])

  muscleGroups MuscleGroup[] @relation("PlanMuscleGroups")

  exercises         WorkoutPlanExercise[]
  sharedWith        User[]                @relation("SharedWorkouts")
  assignedWorkouts  AssignedWorkout[]
  sessions          WorkoutSession[]
  WorkoutProgramDay WorkoutProgramDay[]

  @@index([userId])
}

model WorkoutPlanExercise {
  id            Int         @id @default(autoincrement())
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId Int
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId    Int

  order         Int?
  targetSets    Int?
  targetMetrics Json // âœ… [{ metricId: number, min: number, max?: number }]

  trainingMethodId Int?
  trainingMethod   TrainingMethod?   @relation(fields: [trainingMethodId], references: [id])
  groupId          Int?
  group            WorkoutPlanGroup? @relation("GroupExercises", fields: [groupId], references: [id])

  isWarmup Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkoutPlanGroup {
  id            Int         @id @default(autoincrement())
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId Int

  trainingMethod   TrainingMethod @relation(fields: [trainingMethodId], references: [id])
  trainingMethodId Int

  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  exercises WorkoutPlanExercise[] @relation("GroupExercises")
}

model Exercise {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(50)
  description String?
  videoUrl    String? @db.VarChar(300)

  difficulty   ExerciseDifficulty? @relation(fields: [difficultyId], references: [id])
  difficultyId Int?

  exerciseType   ExerciseType @relation(fields: [exerciseTypeId], references: [id])
  exerciseTypeId Int

  primaryMuscles   Muscle[] @relation("PrimaryMuscles")
  secondaryMuscles Muscle[] @relation("SecondaryMuscles")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  workoutPlanEntries WorkoutPlanExercise[]
  exerciseLogs       ExerciseLog[]
  equipmentSlots     ExerciseEquipmentSlot[]

  @@index([userId])
}

model ExerciseEquipmentSlot {
  id         Int      @id @default(autoincrement())
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int
  slotIndex  Int // e.g., 1 = primary equipment, 2 = bench, etc.
  isRequired Boolean  @default(true)
  comment    String?  @db.VarChar(300)

  options ExerciseEquipmentOption[]

  @@unique([exerciseId, slotIndex])
  @@index([exerciseId])
}

model ExerciseEquipmentOption {
  id            Int                   @id @default(autoincrement())
  slot          ExerciseEquipmentSlot @relation(fields: [slotId], references: [id])
  slotId        Int
  subcategory   EquipmentSubcategory  @relation(fields: [subcategoryId], references: [id])
  subcategoryId Int

  @@unique([slotId, subcategoryId])
  @@index([slotId])
  @@index([subcategoryId])
}

model BodyPart {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  muscles      Muscle[]
  muscleGroups MuscleGroup[] @relation("MuscleGroupBodyParts")

  @@index([name])
}

model Muscle {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  bodyPart   BodyPart @relation(fields: [bodyPartId], references: [id])
  bodyPartId Int

  primaryInExercises   Exercise[] @relation("PrimaryMuscles")
  secondaryInExercises Exercise[] @relation("SecondaryMuscles")
}

model ExerciseType {
  id        Int                  @id @default(autoincrement())
  name      String               @unique
  exercises Exercise[]
  metrics   ExerciseTypeMetric[]

  @@index([name])
}

model ExerciseDifficulty {
  id        Int        @id @default(autoincrement())
  level     String     @unique // e.g. "Beginner", "Intermediate", "Advanced"
  exercises Exercise[]

  @@index([level])
}

model ExerciseLog {
  id               Int @id @default(autoincrement())
  exerciseId       Int
  workoutSessionId Int

  setNumber Int
  metrics   Json // âœ… stores { [metricId]: number | string }

  notes String? @db.VarChar(1000)

  carouselOrder Int?
  groupKey      String?
  instanceKey   String?
  completedAt   DateTime?
  isAutoFilled  Boolean?  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  exercise       Exercise       @relation(fields: [exerciseId], references: [id])
  workoutSession WorkoutSession @relation(fields: [workoutSessionId], references: [id])

  equipment ExerciseLogEquipment[]

  isWarmup Boolean @default(false)

  @@index([exerciseId])
  @@index([workoutSessionId])
}

model ExerciseLogEquipment {
  id             Int @id @default(autoincrement())
  exerciseLogId  Int
  gymEquipmentId Int

  exerciseLog  ExerciseLog  @relation(fields: [exerciseLogId], references: [id], onDelete: Cascade)
  gymEquipment GymEquipment @relation(fields: [gymEquipmentId], references: [id])

  @@unique([exerciseLogId, gymEquipmentId])
}

model WorkoutSession {
  id        Int       @id @default(autoincrement())
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  notes     String?

  user   User @relation(fields: [userId], references: [id])
  userId Int

  gym   Gym @relation(fields: [gymId], references: [id]) // âœ… Add this line
  gymId Int // âœ… Add this line

  workoutPlan   WorkoutPlan? @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId Int?

  assignedWorkout   AssignedWorkout? @relation(fields: [assignedWorkoutId], references: [id])
  assignedWorkoutId Int?

  exerciseLogs ExerciseLog[]

  @@index([userId])
  @@index([workoutPlanId])
  @@index([assignedWorkoutId])
  @@index([gymId]) // âœ… Add this index for performance
}

model AssignedWorkout {
  id            Int              @id @default(autoincrement())
  trainer       User             @relation("TrainerAssignments", fields: [trainerId], references: [id])
  trainerId     Int
  assignee      User             @relation("UserAssignments", fields: [assigneeId], references: [id])
  assigneeId    Int
  workoutPlan   WorkoutPlan      @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId Int
  scheduledFor  DateTime
  status        AssignmentStatus @default(PENDING)
  feedback      String?

  sessions WorkoutSession[]

  createdAt DateTime @default(now())

  @@index([assigneeId])
  @@index([trainerId])
}

model Equipment {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100)
  description String? @db.VarChar(500)
  brand       String  @db.VarChar(50)
  manualUrl   String? @db.VarChar(200)

  category   EquipmentCategory @relation(fields: [categoryId], references: [id])
  categoryId Int

  subcategory   EquipmentSubcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  images            EquipmentImage[]
  gyms              GymEquipment[]
  GymEquipmentImage GymEquipmentImage[]

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([brand])
}

model EquipmentCategory {
  id            Int                    @id @default(autoincrement())
  name          String                 @unique // Display name: "Free Weights"
  slug          String                 @unique // URL-friendly version: "free-weights"
  subcategories EquipmentSubcategory[]
  equipments    Equipment[]
}

model EquipmentSubcategory {
  id         Int               @id @default(autoincrement())
  name       String            @unique
  slug       String            @unique
  category   EquipmentCategory @relation(fields: [categoryId], references: [id])
  categoryId Int
  equipments Equipment[]

  exerciseOptions ExerciseEquipmentOption[]
}

model Gym {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  country     String
  countryCode String?
  state       String?
  stateCode   String?
  city        String
  address     String
  postalCode  String?
  latitude    Float?
  longitude   Float?
  websiteUrl  String?
  imageUrl    String?
  phone       String?
  email       String?
  isApproved  Boolean   @default(false)
  autoApproveManagerUploads Boolean @default(true)
  requireHumanReviewForPersons Boolean @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  workoutSessions WorkoutSession[] // âœ… Back-reference to fix the relation

  // Relations
  creator   User? @relation("UserCreatedGyms", fields: [creatorId], references: [id])
  creatorId Int?

  gymRoles GymManagementRole[]

  trainers          GymTrainer[]
  chatMembers       GymChatMember[]
  gymEquipment      GymEquipment[]
  GymEquipmentImage GymEquipmentImage[]
  imageEmbeddings   ImageEmbedding[]
  trainingCandidates TrainingCandidate[] @relation("GymTrainingCandidates")
  
  @@index([name])
  @@index([city])
  @@index([country])
  @@index([latitude, longitude])
}

model GymManagementRole {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  gym       Gym      @relation(fields: [gymId], references: [id])
  gymId     Int
  role      GymRole
  createdAt DateTime @default(now())

  @@unique([userId, gymId])
  @@index([userId])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  action    String // e.g. "USER_LOGIN", "DATA_UPDATE"
  entity    String? // e.g. "User", "Workout"
  entityId  Int? // ID of affected entity
  userId    Int? // User who performed action
  metadata  Json? // Additional context data
  createdAt DateTime @default(now())

  @@index([action])
  @@index([entity, entityId])
  @@index([userId])
  @@index([createdAt])
}

model GymTrainer {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  gym    Gym  @relation(fields: [gymId], references: [id])
  gymId  Int

  @@unique([userId, gymId])
}

model GymChatMember {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  gym        Gym       @relation(fields: [gymId], references: [id])
  gymId      Int
  joinedAt   DateTime  @default(now())
  lastActive DateTime?
  isBanned   Boolean   @default(false)

  @@unique([userId, gymId])
}

model GymEquipment {
  id          Int       @id @default(autoincrement())
  gym         Gym       @relation(fields: [gymId], references: [id])
  gymId       Int
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId Int

  quantity  Int      @default(1)
  note      String?  @db.VarChar(300)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images                 GymEquipmentImage[]
  exerciseLogConnections ExerciseLogEquipment[]
  trainingCandidates     TrainingCandidate[] @relation("EquipmentTrainingCandidates")

  @@unique([gymId, equipmentId])
  @@index([gymId])
  @@index([equipmentId])
}

model TrainingGoal {
  id           Int               @id @default(autoincrement())
  name         String
  slug         String            @unique
  presets      IntensityPreset[]
  users        User[]
  workoutPlans WorkoutPlan[]

  trainingMethods TrainingMethod[] @relation("TrainingMethodToGoal")
}

model IntensityPreset {
  id                Int                      @id @default(autoincrement())
  trainingGoal      TrainingGoal             @relation(fields: [trainingGoalId], references: [id])
  trainingGoalId    Int
  experienceLevel   ExperienceLevel          @relation(fields: [experienceLevelId], references: [id])
  experienceLevelId Int
  metricDefaults    IntensityMetricDefault[]

  workoutPlans WorkoutPlan[] // âœ… Add this back-reference
}

model IntensityMetricDefault {
  id         Int             @id @default(autoincrement())
  metricId   Int
  defaultMin Float
  defaultMax Float?
  preset     IntensityPreset @relation(fields: [presetId], references: [id])
  presetId   Int
}

model ExperienceLevel {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  key       String   @unique
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  WorkoutPlans     WorkoutPlan[]
  users            User[]
  intensityPresets IntensityPreset[]
}

model MuscleGroup {
  id                           Int                            @id @default(autoincrement())
  name                         String                         @unique
  slug                         String                         @unique
  plans                        WorkoutPlan[]                  @relation("PlanMuscleGroups")
  WorkoutProgramMuscleCooldown WorkoutProgramMuscleCooldown[]
  UserMuscleCooldownOverride   UserMuscleCooldownOverride[]
  bodyParts                    BodyPart[]                     @relation("MuscleGroupBodyParts")
}

model TrainingMethod {
  id            Int                   @id @default(autoincrement())
  name          String                @unique
  slug          String                @unique
  description   String?
  planExercises WorkoutPlanExercise[]

  trainingGoals TrainingGoal[] @relation("TrainingMethodToGoal")

  minGroupSize Int?
  maxGroupSize Int?

  shouldAlternate Boolean? @default(false)

  workoutPlanGroups WorkoutPlanGroup[] // ðŸ‘ˆ Add this
}

model WorkoutProgram {
  id        Int      @id @default(autoincrement())
  name      String
  notes     String?
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  days        WorkoutProgramDay[]
  cooldowns   WorkoutProgramMuscleCooldown[]
  assignments WorkoutProgramAssignment[]

  sharedWith User[] @relation("SharedPrograms")
}

model WorkoutProgramDay {
  id            Int            @id @default(autoincrement())
  programId     Int
  program       WorkoutProgram @relation(fields: [programId], references: [id])
  dayOfWeek     Int // 0 = Sunday ... 6 = Saturday
  workoutPlanId Int
  workoutPlan   WorkoutPlan    @relation(fields: [workoutPlanId], references: [id])
  notes         String?

  assignments WorkoutProgramAssignment[]
}

model WorkoutProgramMuscleCooldown {
  id            Int            @id @default(autoincrement())
  programId     Int
  program       WorkoutProgram @relation(fields: [programId], references: [id])
  muscleGroupId Int
  muscleGroup   MuscleGroup    @relation(fields: [muscleGroupId], references: [id])
  daysRequired  Int // e.g., 2 = 48h rest
}

model UserMuscleCooldownOverride {
  id            Int         @id @default(autoincrement())
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  muscleGroupId Int
  muscleGroup   MuscleGroup @relation(fields: [muscleGroupId], references: [id])
  daysRequired  Int
  notes         String?

  @@unique([userId, muscleGroupId])
}

model WorkoutProgramAssignment {
  id               Int               @id @default(autoincrement())
  userId           Int
  user             User              @relation(fields: [userId], references: [id])
  programDayId     Int
  programDay       WorkoutProgramDay @relation(fields: [programDayId], references: [id])
  scheduledDate    DateTime
  status           AssignmentStatus  @default(PENDING)
  overrideDate     DateTime?
  WorkoutProgram   WorkoutProgram?   @relation(fields: [workoutProgramId], references: [id])
  workoutProgramId Int?
}

model UserWorkoutPreferences {
  id                   Int     @id @default(autoincrement())
  userId               Int     @unique
  user                 User    @relation(fields: [userId], references: [id])
  preferredWorkoutDays Int[] // e.g. [1, 2, 3, 4, 5]
  preferredRestDays    Int[] // e.g. [0, 6]
  autoReschedule       Boolean @default(true)
}

model Metric {
  id            Int                  @id @default(autoincrement())
  name          String
  slug          String               @unique
  unit          String
  inputType     String // e.g., 'number', 'time', 'text'
  useInPlanning Boolean              @default(true)
  minOnly       Boolean              @default(false)
  exerciseTypes ExerciseTypeMetric[]
}

model ExerciseTypeMetric {
  exerciseType   ExerciseType @relation(fields: [exerciseTypeId], references: [id])
  exerciseTypeId Int
  metric         Metric       @relation(fields: [metricId], references: [id])
  metricId       Int
  order          Int

  @@id([exerciseTypeId, metricId]) // composite key
}

/// --- NEW + PATCHED TABLES FOR CV PIPELINE ---

// Images uploaded for any equipment (originals, crops, etc.)
model EquipmentImage {
  id               String   @id @default(cuid())
  equipmentId      Int
  uploadedByUserId Int?
  // storage + metadata
  storageKey       String
  mimeType         String
  width            Int
  height           Int
  sha256           String   @unique
  cdnUrl           String?
  phash            String?
  hasPerson        Boolean?
  personCount      Int?
  personBoxes      Json?
  modelVendor      String?
  modelName        String?
  modelVersion     String?
  // optional annotations
  note             String?
  angleId          Int? @db.SmallInt
  heightId         Int? @db.SmallInt
  lightingId       Int? @db.SmallInt
  mirrorId         Int? @db.SmallInt
  distanceId       Int? @db.SmallInt
  sourceId         Int? @db.SmallInt
  splitId          Int? @db.SmallInt
  createdAt        DateTime @default(now())

  // relations
  equipment      Equipment @relation(fields: [equipmentId], references: [id])
  uploadedByUser User?     @relation(fields: [uploadedByUserId], references: [id])
  angle          AngleType?    @relation(fields: [angleId], references: [id])
  heightType     HeightType?   @relation(fields: [heightId], references: [id])
  lighting       LightingType? @relation(fields: [lightingId], references: [id])
  mirror         MirrorType?   @relation(fields: [mirrorId], references: [id])
  distance       DistanceType? @relation(fields: [distanceId], references: [id])
  source         SourceType?   @relation(fields: [sourceId], references: [id])
  split          SplitType?    @relation(fields: [splitId], references: [id])

  // reverse
  embeddings ImageEmbedding[]
  links      GymEquipmentImage[]
  ImageQueue ImageQueue[]

  @@index([equipmentId, createdAt])
  @@index([uploadedByUserId])
  @@index([splitId])
  @@index([angleId, heightId, lightingId])
  @@index([cdnUrl])
}

// Image â†” Gym+Equipment join (what gym this image was captured at)
model GymEquipmentImage {
  id               String   @id @default(cuid())
  gymEquipmentId   Int?
  gymId            Int
  equipmentId      Int
  imageId          String?
  capturedByUserId Int?
  capturedAt       DateTime @default(now())
  angleId          Int? @db.SmallInt
  heightId         Int? @db.SmallInt
  lightingId       Int? @db.SmallInt
  mirrorId         Int? @db.SmallInt
  distanceId       Int? @db.SmallInt
  sourceId         Int? @db.SmallInt
  splitId          Int? @db.SmallInt
  status               GymImageStatus @default(PENDING)
  candidateForGlobal   Boolean        @default(false)
  recognitionScoreAtCapture Float?
  storageKey       String?
  objectUuid       String?
  sha256           String? @unique
  isPrimary       Boolean  @default(false)
  isSafe           Boolean?
  nsfwScore        Float?
  hasPerson        Boolean?
  personCount      Int?
  personBoxes      Json?
  modelVendor      String?
  modelName        String?
  modelVersion     String?
  approvedAt       DateTime?
  approvedByUserId Int?

  // relations
  gymEquipment   GymEquipment?   @relation(fields: [gymEquipmentId], references: [id])
  gym            Gym            @relation(fields: [gymId], references: [id])
  equipment      Equipment      @relation(fields: [equipmentId], references: [id])
  image          EquipmentImage? @relation(fields: [imageId], references: [id], onDelete: Cascade)
  capturedByUser User?          @relation("GymEquipmentImageCapturedBy", fields: [capturedByUserId], references: [id])
  angle          AngleType?    @relation(fields: [angleId], references: [id])
  heightType     HeightType?   @relation(fields: [heightId], references: [id])
  lighting       LightingType? @relation(fields: [lightingId], references: [id])
  mirror         MirrorType?   @relation(fields: [mirrorId], references: [id])
  distance       DistanceType? @relation(fields: [distanceId], references: [id])
  source         SourceType?   @relation(fields: [sourceId], references: [id])
  split          SplitType?    @relation(fields: [splitId], references: [id])
  approvedByUser User?         @relation("GymEquipmentImageApprovedBy", fields: [approvedByUserId], references: [id])
  embeddings     ImageEmbedding[]
  trainingCandidates TrainingCandidate[] @relation("ImageTrainingCandidates")

  @@unique([gymId, equipmentId, imageId])
  @@index([gymId, equipmentId])
  @@index([imageId])
  @@index([gymEquipmentId])
  @@index([splitId])
  @@index([status])
  @@index([angleId, heightId, lightingId])
  @@index([sha256])
}

// Vector embeddings (one row per image/model/scope)
model ImageEmbedding {
  id           String                @id @default(cuid())

  // EXISTING (global):
  imageId      String?               // FK -> EquipmentImage.id (GLOBAL embeddings)

  // NEW (gym):
  gymImageId   String?               // FK -> GymEquipmentImage.id (GYM embeddings)

  scopeType    EmbeddingScopeType? @map("scope_type")
  gymId        Int?                @map("gym_id")

  scope        String                // e.g. 'GLOBAL' or 'GYM:<gymId>'
  modelVendor  String
  modelName    String
  modelVersion String
  dim          Int
  // Prisma does not (yet) have a native pgvector type.
  // Use Unsupported("vector"); final type/ops tuned in SQL migrations.
  embeddingVec Unsupported("vector")?
  createdAt    DateTime              @default(now())

  equipmentImage EquipmentImage?     @relation(fields: [imageId], references: [id], onDelete: Cascade)
  gymImage       GymEquipmentImage?  @relation(fields: [gymImageId], references: [id], onDelete: Cascade)
  gym           Gym?                 @relation(fields: [gymId], references: [id])

  // Keep existing unique for globalâ€¦
  @@unique([imageId, scope, modelVendor, modelName, modelVersion])
  // â€¦and add one for gym
  @@unique([gymImageId, scope, modelVendor, modelName, modelVersion])

  @@index([scope, modelVendor, modelName, modelVersion])
  @@index([scopeType], map: "ImageEmbedding_scope_type_idx")
  @@index([gymId], map: "ImageEmbedding_gym_id_idx")
  @@index([createdAt])
}

// Light-weight work queue for (re)processing images (crop, embed, etc.)
model ImageQueue {
  id          String         @id @default(cuid())
  imageId     String?        // for GLOBAL jobs (promotion)
  storageKey  String?        // for GYM jobs (finalize)
  jobType     String
  status      ImageJobStatus @default(pending)
  priority    Int            @default(0)
  attempts    Int            @default(0)
  lastError   String?
  scheduledAt DateTime?
  startedAt   DateTime?
  finishedAt  DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  image EquipmentImage? @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@index([finishedAt, status])
  @@index([status, priority, scheduledAt])
  @@index([jobType, status])
  @@index([imageId])
  @@index([storageKey])
}

model AngleType {
  id           Int      @id @default(autoincrement()) @db.SmallInt
  key          String   @unique
  label        String
  description  String?
  active       Boolean  @default(true)
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  equipmentImages    EquipmentImage[]
  gymEquipmentImages GymEquipmentImage[]
}

model HeightType {
  id           Int      @id @default(autoincrement()) @db.SmallInt
  key          String   @unique
  label        String
  description  String?
  active       Boolean  @default(true)
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  equipmentImages    EquipmentImage[]
  gymEquipmentImages GymEquipmentImage[]
}

model LightingType {
  id           Int      @id @default(autoincrement()) @db.SmallInt
  key          String   @unique
  label        String
  description  String?
  active       Boolean  @default(true)
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  equipmentImages    EquipmentImage[]
  gymEquipmentImages GymEquipmentImage[]
}

model MirrorType {
  id           Int      @id @default(autoincrement()) @db.SmallInt
  key          String   @unique
  label        String
  description  String?
  active       Boolean  @default(true)
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  equipmentImages    EquipmentImage[]
  gymEquipmentImages GymEquipmentImage[]
}

model DistanceType {
  id           Int      @id @default(autoincrement()) @db.SmallInt
  key          String   @unique
  label        String
  description  String?
  active       Boolean  @default(true)
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  equipmentImages    EquipmentImage[]
  gymEquipmentImages GymEquipmentImage[]
}

model SourceType {
  id           Int      @id @default(autoincrement()) @db.SmallInt
  key          String   @unique
  label        String
  description  String?
  active       Boolean  @default(true)
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  equipmentImages    EquipmentImage[]
  gymEquipmentImages GymEquipmentImage[]
}

model SplitType {
  id           Int      @id @default(autoincrement()) @db.SmallInt
  key          String   @unique
  label        String
  description  String?
  active       Boolean  @default(true)
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  equipmentImages    EquipmentImage[]
  gymEquipmentImages GymEquipmentImage[]
}

enum TrainingSource {
  gym_equipment
  admin
  user_submission
}

enum TrainingStatus {
  pending
  approved
  quarantined
  rejected
  failed
}

model TrainingCandidate {
  id            String         @id @default(cuid())
  storageKey    String
  imageId       String?
  gymEquipmentId Int?
  gymId         Int?
  uploaderUserId Int?
  source        TrainingSource @default(gym_equipment)
  status        TrainingStatus @default(pending)
  hash          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  image        GymEquipmentImage? @relation("ImageTrainingCandidates", fields: [imageId], references: [id])
  gymEquipment GymEquipment? @relation("EquipmentTrainingCandidates", fields: [gymEquipmentId], references: [id])
  gym          Gym?          @relation("GymTrainingCandidates", fields: [gymId], references: [id])
  uploader     User?         @relation("UserTrainingCandidates", fields: [uploaderUserId], references: [id])

  @@index([status])
  @@index([hash])
}