datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../../src/generated/test-prisma"
}

// --- Enums ---
enum AppRole {
  ADMIN
  MODERATOR
}

enum UserRole {
  USER
  PREMIUM_USER
  PERSONAL_TRAINER
}

enum GymRole {
  GYM_MODERATOR
  GYM_ADMIN
}

enum AssignmentStatus {
  PENDING
  COMPLETED
  MISSED
}

// --- Models ---

model User {
  id                  Int       @id @default(autoincrement())
  username            String    @unique @db.VarChar(30)
  email               String    @unique @db.VarChar(255)
  password            String    @db.VarChar(100)
  appRole             AppRole?
  userRole            UserRole  @default(USER)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  deletedAt           DateTime?
  resetToken          String?
  resetTokenExpiresAt DateTime?
  tokenVersion        Int       @default(1)

  exercises          Exercise[]
  gymManagementRoles GymManagementRole[]
  workoutPlans       WorkoutPlan[]
  exerciseLogs       ExerciseLog[]
  gymsAsTrainer      GymTrainer[]
  chatMemberships    GymChatMember[]
  sharedWorkouts     WorkoutPlan[]       @relation("SharedWorkouts")
  createdGyms        Gym[]               @relation("UserCreatedGyms")

  workoutSessions    WorkoutSession[]
  trainerAssignments AssignedWorkout[] @relation("TrainerAssignments")
  userAssignments    AssignedWorkout[] @relation("UserAssignments")
}

model WorkoutPlan {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  description String?
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  version      Int           @default(1)
  parentPlanId Int?
  parentPlan   WorkoutPlan?  @relation("PlanVersions", fields: [parentPlanId], references: [id])
  versions     WorkoutPlan[] @relation("PlanVersions")

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  exercises        WorkoutPlanExercise[]
  exerciseLogs     ExerciseLog[]         @relation("WorkoutLogs")
  sharedWith       User[]                @relation("SharedWorkouts")
  assignedWorkouts AssignedWorkout[]
  sessions         WorkoutSession[]

  @@index([userId])
}

model WorkoutPlanExercise {
  id            Int         @id @default(autoincrement())
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId Int
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId    Int

  order        Int?
  targetSets   Int?
  targetReps   Int?
  targetWeight Decimal? @db.Decimal(5, 2)
  targetRpe    Decimal? @db.Decimal(3, 1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([workoutPlanId, exerciseId])
}

model Exercise {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  workoutPlanEntries WorkoutPlanExercise[]
  exerciseLogs       ExerciseLog[]
  equipments         ExerciseEquipment[]

  @@index([userId])
}

model ExerciseEquipment {
  id          Int       @id @default(autoincrement())
  exercise    Exercise  @relation(fields: [exerciseId], references: [id])
  exerciseId  Int
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId Int
  isRequired  Boolean   @default(true)

  @@unique([exerciseId, equipmentId])
  @@index([exerciseId])
  @@index([equipmentId])
}

model ExerciseLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sets      Int?
  reps      Int?
  weight    Float?
  rpe       Decimal? @db.Decimal(3, 1)
  notes     String?  @db.VarChar(1000)

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int

  workoutPlan   WorkoutPlan? @relation("WorkoutLogs", fields: [workoutPlanId], references: [id])
  workoutPlanId Int?

  workoutSession   WorkoutSession? @relation(fields: [workoutSessionId], references: [id])
  workoutSessionId Int?

  gym   Gym? @relation(fields: [gymId], references: [id])
  gymId Int?

  gymEquipment   GymEquipment? @relation(fields: [gymEquipmentId], references: [id])
  gymEquipmentId Int?

  @@index([userId])
  @@index([exerciseId])
  @@index([workoutPlanId])
  @@index([gymId])
}

model WorkoutSession {
  id        Int       @id @default(autoincrement())
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  notes     String?

  user   User @relation(fields: [userId], references: [id])
  userId Int

  workoutPlan   WorkoutPlan? @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId Int?

  assignedWorkout   AssignedWorkout? @relation(fields: [assignedWorkoutId], references: [id])
  assignedWorkoutId Int?

  exerciseLogs ExerciseLog[]

  @@index([userId])
  @@index([workoutPlanId])
  @@index([assignedWorkoutId])
}

model AssignedWorkout {
  id            Int              @id @default(autoincrement())
  trainer       User             @relation("TrainerAssignments", fields: [trainerId], references: [id])
  trainerId     Int
  assignee      User             @relation("UserAssignments", fields: [assigneeId], references: [id])
  assigneeId    Int
  workoutPlan   WorkoutPlan      @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId Int
  scheduledFor  DateTime
  status        AssignmentStatus @default(PENDING)
  feedback      String?

  sessions WorkoutSession[]

  createdAt DateTime @default(now())

  @@index([assigneeId])
  @@index([trainerId])
}

model Equipment {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100)
  description String? @db.VarChar(500)
  brand       String  @db.VarChar(50)
  manualUrl   String? @db.VarChar(200)

  category   EquipmentCategory @relation(fields: [categoryId], references: [id])
  categoryId Int

  subcategory   EquipmentSubcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  exercises ExerciseEquipment[]
  images    EquipmentImage[]
  gyms      GymEquipment[]

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([brand])
}

model EquipmentCategory {
  id            Int                    @id @default(autoincrement())
  name          String                 @unique // Display name: "Free Weights"
  slug          String                 @unique // URL-friendly version: "free-weights"
  subcategories EquipmentSubcategory[]
  equipments    Equipment[]
}

model EquipmentSubcategory {
  id         Int               @id @default(autoincrement())
  name       String            @unique
  slug       String            @unique
  category   EquipmentCategory @relation(fields: [categoryId], references: [id])
  categoryId Int
  equipments Equipment[]
}

model Gym {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  country     String
  countryCode String?
  state       String?
  stateCode   String?
  city        String
  address     String
  postalCode  String?
  latitude    Float?
  longitude   Float?
  websiteUrl  String?
  imageUrl    String?
  phone       String?
  email       String?
  isApproved  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relations
  creator   User? @relation("UserCreatedGyms", fields: [creatorId], references: [id])
  creatorId Int?

  gymRoles GymManagementRole[]

  trainers     GymTrainer[]
  chatMembers  GymChatMember[]
  exerciseLogs ExerciseLog[]
  gymEquipment GymEquipment[]

  @@index([name])
  @@index([city])
  @@index([country])
  @@index([latitude, longitude])
}

model GymManagementRole {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  gym       Gym      @relation(fields: [gymId], references: [id])
  gymId     Int
  role      GymRole
  createdAt DateTime @default(now())

  @@unique([userId, gymId])
  @@index([userId])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  action    String // e.g. "USER_LOGIN", "DATA_UPDATE"
  entity    String? // e.g. "User", "Workout"
  entityId  Int? // ID of affected entity
  userId    Int? // User who performed action
  metadata  Json? // Additional context data
  createdAt DateTime @default(now())

  @@index([action])
  @@index([entity, entityId])
  @@index([userId])
  @@index([createdAt])
}

model GymTrainer {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  gym    Gym  @relation(fields: [gymId], references: [id])
  gymId  Int

  @@unique([userId, gymId])
}

model GymChatMember {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  gym        Gym       @relation(fields: [gymId], references: [id])
  gymId      Int
  joinedAt   DateTime  @default(now())
  lastActive DateTime?
  isBanned   Boolean   @default(false)

  @@unique([userId, gymId])
}

model EquipmentImage {
  id          Int       @id @default(autoincrement())
  url         String    @db.VarChar(300)
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId Int
  createdAt   DateTime  @default(now())

  @@index([equipmentId])
}

model GymEquipment {
  id          Int       @id @default(autoincrement())
  gym         Gym       @relation(fields: [gymId], references: [id])
  gymId       Int
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId Int

  quantity  Int      @default(1)
  note      String?  @db.VarChar(300)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images       GymEquipmentImage[]
  exerciseLogs ExerciseLog[]

  @@unique([gymId, equipmentId])
  @@index([gymId])
  @@index([equipmentId])
}

model GymEquipmentImage {
  id             Int          @id @default(autoincrement())
  url            String       @db.VarChar(300)
  gymEquipment   GymEquipment @relation(fields: [gymEquipmentId], references: [id])
  gymEquipmentId Int
  createdAt      DateTime     @default(now())

  @@index([gymEquipmentId])
}
